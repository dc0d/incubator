// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mq

import (
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientMock{
// 			ReceiveMessageFunc: func() (interface{Messages() []interface{}}, error) {
// 				panic("mock out the ReceiveMessage method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// ReceiveMessageFunc mocks the ReceiveMessage method.
	ReceiveMessageFunc func() (interface{ Messages() []interface{} }, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReceiveMessage holds details about calls to the ReceiveMessage method.
		ReceiveMessage []struct {
		}
	}
	lockReceiveMessage sync.RWMutex
}

// ReceiveMessage calls ReceiveMessageFunc.
func (mock *ClientMock) ReceiveMessage() (interface{ Messages() []interface{} }, error) {
	if mock.ReceiveMessageFunc == nil {
		panic("ClientMock.ReceiveMessageFunc: method is nil but Client.ReceiveMessage was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReceiveMessage.Lock()
	mock.calls.ReceiveMessage = append(mock.calls.ReceiveMessage, callInfo)
	mock.lockReceiveMessage.Unlock()
	return mock.ReceiveMessageFunc()
}

// ReceiveMessageCalls gets all the calls that were made to ReceiveMessage.
// Check the length with:
//     len(mockedClient.ReceiveMessageCalls())
func (mock *ClientMock) ReceiveMessageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReceiveMessage.RLock()
	calls = mock.calls.ReceiveMessage
	mock.lockReceiveMessage.RUnlock()
	return calls
}
